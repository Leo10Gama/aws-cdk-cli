"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ToolkitInfo = exports.DEFAULT_TOOLKIT_STACK_NAME = void 0;
const util_1 = require("util");
const chalk = require("chalk");
const bootstrap_props_1 = require("./bootstrap/bootstrap-props");
const cfn_api_1 = require("./deployments/cfn-api");
const private_1 = require("./io/private");
const toolkit_error_1 = require("./toolkit-error");
exports.DEFAULT_TOOLKIT_STACK_NAME = 'CDKToolkit';
/**
 * Information on the Bootstrap stack of the environment we're deploying to.
 *
 * This class serves to:
 *
 * - Inspect the bootstrap stack, and return various properties of it for successful
 *   asset deployment (in case of legacy-synthesized stacks).
 * - Validate the version of the target environment, and nothing else (in case of
 *   default-synthesized stacks).
 *
 * An object of this type might represent a bootstrap stack that could not be found.
 * This is not an issue unless any members are used that require the bootstrap stack
 * to have been found, in which case an error is thrown (default-synthesized stacks
 * should never run into this as they don't need information from the bootstrap
 * stack, all information is already encoded into the Cloud Assembly Manifest).
 *
 * Nevertheless, an instance of this class exists to serve as a cache for SSM
 * parameter lookups (otherwise, the "bootstrap stack version" parameter would
 * need to be read repeatedly).
 *
 * Called "ToolkitInfo" for historical reasons.
 *
 */
class ToolkitInfo {
    static determineName(overrideName) {
        return overrideName ?? exports.DEFAULT_TOOLKIT_STACK_NAME;
    }
    static async lookup(environment, sdk, ioHelper, stackName) {
        const cfn = sdk.cloudFormation();
        stackName = ToolkitInfo.determineName(stackName);
        try {
            const stack = await (0, cfn_api_1.stabilizeStack)(cfn, ioHelper, stackName);
            if (!stack) {
                await ioHelper.notify(private_1.IO.DEFAULT_TOOLKIT_DEBUG.msg((0, util_1.format)("The environment %s doesn't have the CDK toolkit stack (%s) installed. Use %s to setup your environment for use with the toolkit.", environment.name, stackName, chalk.blue(`cdk bootstrap "${environment.name}"`))));
                return ToolkitInfo.bootstrapStackNotFoundInfo(stackName);
            }
            if (stack.stackStatus.isCreationFailure) {
                // Treat a "failed to create" bootstrap stack as an absent one.
                await ioHelper.notify(private_1.IO.DEFAULT_TOOLKIT_DEBUG.msg((0, util_1.format)('The environment %s has a CDK toolkit stack (%s) that failed to create. Use %s to try provisioning it again.', environment.name, stackName, chalk.blue(`cdk bootstrap "${environment.name}"`))));
                return ToolkitInfo.bootstrapStackNotFoundInfo(stackName);
            }
            return new ExistingToolkitInfo(stack);
        }
        catch (e) {
            return ToolkitInfo.bootstrapStackLookupError(stackName, e);
        }
    }
    static fromStack(stack) {
        return new ExistingToolkitInfo(stack);
    }
    static bootstrapStackNotFoundInfo(stackName) {
        return new BootstrapStackNotFoundInfo(stackName, "This deployment requires a bootstrap stack with a known name; pass '--toolkit-stack-name' or switch to using the 'DefaultStackSynthesizer' (see https://docs.aws.amazon.com/cdk/latest/guide/bootstrapping.html)");
    }
    static bootstrapStackLookupError(stackName, e) {
        return new BootstrapStackNotFoundInfo(stackName, `This deployment requires a bootstrap stack with a known name, but during its lookup the following error occurred: ${e}; pass \'--toolkit-stack-name\' or switch to using the \'DefaultStackSynthesizer\' (see https://docs.aws.amazon.com/cdk/latest/guide/bootstrapping.html)`);
    }
    constructor() {
    }
}
exports.ToolkitInfo = ToolkitInfo;
/**
 * Returned when a bootstrap stack is found
 */
class ExistingToolkitInfo extends ToolkitInfo {
    bootstrapStack;
    found = true;
    constructor(bootstrapStack) {
        super();
        this.bootstrapStack = bootstrapStack;
    }
    get bucketUrl() {
        return `https://${this.requireOutput(bootstrap_props_1.BUCKET_DOMAIN_NAME_OUTPUT)}`;
    }
    get bucketName() {
        return this.requireOutput(bootstrap_props_1.BUCKET_NAME_OUTPUT);
    }
    get repositoryName() {
        return this.requireOutput(bootstrap_props_1.REPOSITORY_NAME_OUTPUT);
    }
    get version() {
        return parseInt(this.bootstrapStack.outputs[bootstrap_props_1.BOOTSTRAP_VERSION_OUTPUT] ?? '0', 10);
    }
    get variant() {
        return this.bootstrapStack.parameters[bootstrap_props_1.BOOTSTRAP_VARIANT_PARAMETER] ?? bootstrap_props_1.DEFAULT_BOOTSTRAP_VARIANT;
    }
    get parameters() {
        return this.bootstrapStack.parameters ?? {};
    }
    get terminationProtection() {
        return this.bootstrapStack.terminationProtection ?? false;
    }
    get stackName() {
        return this.bootstrapStack.stackName;
    }
    /**
     * Prepare an ECR repository for uploading to using Docker
     *
     */
    requireOutput(output) {
        if (!(output in this.bootstrapStack.outputs)) {
            throw new toolkit_error_1.ToolkitError(`The CDK toolkit stack (${this.bootstrapStack.stackName}) does not have an output named ${output}. Use 'cdk bootstrap' to correct this.`);
        }
        return this.bootstrapStack.outputs[output];
    }
}
/**
 * Returned when a bootstrap stack could not be found
 *
 * This is not an error in principle, UNTIL one of the members is called that requires
 * the bootstrap stack to have been found, in which case the lookup error is still thrown
 * belatedly.
 *
 * The errors below serve as a last stop-gap message--normally calling code should have
 * checked `toolkit.found` and produced an appropriate error message.
 */
class BootstrapStackNotFoundInfo extends ToolkitInfo {
    stackName;
    errorMessage;
    found = false;
    constructor(stackName, errorMessage) {
        super();
        this.stackName = stackName;
        this.errorMessage = errorMessage;
    }
    get bootstrapStack() {
        throw new toolkit_error_1.ToolkitError(this.errorMessage);
    }
    get bucketUrl() {
        throw new toolkit_error_1.ToolkitError(this.errorMessage);
    }
    get bucketName() {
        throw new toolkit_error_1.ToolkitError(this.errorMessage);
    }
    get repositoryName() {
        throw new toolkit_error_1.ToolkitError(this.errorMessage);
    }
    get version() {
        throw new toolkit_error_1.ToolkitError(this.errorMessage);
    }
    get variant() {
        throw new toolkit_error_1.ToolkitError(this.errorMessage);
    }
    prepareEcrRepository() {
        throw new toolkit_error_1.ToolkitError(this.errorMessage);
    }
}
//# sourceMappingURL=data:application/json;base64,