"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResourceMapping = exports.ResourceLocation = exports.AmbiguityError = void 0;
exports.resourceMovements = resourceMovements;
exports.ambiguousMovements = ambiguousMovements;
exports.resourceMappings = resourceMappings;
exports.findResourceMovements = findResourceMovements;
exports.formatTypedMappings = formatTypedMappings;
exports.formatAmbiguousMappings = formatAmbiguousMappings;
const cloudformation_diff_1 = require("@aws-cdk/cloudformation-diff");
const util_1 = require("../../util");
const plugin_1 = require("../plugin");
const streams_1 = require("../streams");
const digest_1 = require("./digest");
class AmbiguityError extends Error {
    movements;
    constructor(movements) {
        super('Ambiguous resource mappings');
        this.movements = movements;
    }
    paths() {
        return this.movements.map(([a, b]) => [convert(a), convert(b)]);
        function convert(locations) {
            return locations.map((l) => l.toPath());
        }
    }
}
exports.AmbiguityError = AmbiguityError;
/**
 * This class mirrors the `ResourceLocation` interface from CloudFormation,
 * but is richer, since it has a reference to the stack object, rather than
 * merely the stack name.
 */
class ResourceLocation {
    stack;
    logicalResourceId;
    constructor(stack, logicalResourceId) {
        this.stack = stack;
        this.logicalResourceId = logicalResourceId;
    }
    toPath() {
        const stack = this.stack;
        const resource = stack.template.Resources?.[this.logicalResourceId];
        const result = resource?.Metadata?.['aws:cdk:path'];
        if (result != null) {
            return result;
        }
        // If the path is not available, we can use stack name and logical ID
        return `${stack.stackName}.${this.logicalResourceId}`;
    }
    getType() {
        const resource = this.stack.template.Resources?.[this.logicalResourceId ?? ''];
        return resource?.Type ?? 'Unknown';
    }
    equalTo(other) {
        return this.logicalResourceId === other.logicalResourceId && this.stack.stackName === other.stack.stackName;
    }
}
exports.ResourceLocation = ResourceLocation;
/**
 * A mapping between a source and a destination location.
 */
class ResourceMapping {
    source;
    destination;
    constructor(source, destination) {
        this.source = source;
        this.destination = destination;
    }
    toTypedMapping() {
        return {
            // the type is the same in both source and destination,
            // so we can use either one
            type: this.source.getType(),
            sourcePath: this.source.toPath(),
            destinationPath: this.destination.toPath(),
        };
    }
}
exports.ResourceMapping = ResourceMapping;
function groupByKey(entries) {
    const result = {};
    for (const [hash, location] of entries) {
        if (hash in result) {
            result[hash].push(location);
        }
        else {
            result[hash] = [location];
        }
    }
    return result;
}
function resourceMovements(before, after) {
    return Object.values(removeUnmovedResources(zip(groupByKey(before.flatMap(resourceDigests)), groupByKey(after.flatMap(resourceDigests)))));
}
function ambiguousMovements(movements) {
    // A movement is considered ambiguous if these two conditions are met:
    //  1. Both sides have at least one element (otherwise, it's just addition or deletion)
    //  2. At least one side has more than one element
    return movements
        .filter(([pre, post]) => pre.length > 0 && post.length > 0)
        .filter(([pre, post]) => pre.length > 1 || post.length > 1);
}
/**
 * Converts a list of unambiguous resource movements into a list of resource mappings.
 *
 */
function resourceMappings(movements) {
    return movements
        .filter(([pre, post]) => pre.length === 1 && post.length === 1 && !pre[0].equalTo(post[0]))
        .map(([pre, post]) => new ResourceMapping(pre[0], post[0]));
}
function removeUnmovedResources(m) {
    const result = {};
    for (const [hash, [before, after]] of Object.entries(m)) {
        const common = before.filter((b) => after.some((a) => a.equalTo(b)));
        result[hash] = [
            before.filter((b) => !common.some((c) => b.equalTo(c))),
            after.filter((a) => !common.some((c) => a.equalTo(c))),
        ];
    }
    return result;
}
/**
 * For each hash, identifying a single resource, zip the two lists of locations,
 * producing a resource movement
 */
function zip(m1, m2) {
    const result = {};
    for (const [hash, locations] of Object.entries(m1)) {
        if (hash in m2) {
            result[hash] = [locations, m2[hash]];
        }
        else {
            result[hash] = [locations, []];
        }
    }
    for (const [hash, locations] of Object.entries(m2)) {
        if (!(hash in m1)) {
            result[hash] = [[], locations];
        }
    }
    return result;
}
/**
 * Computes a list of pairs [digest, location] for each resource in the stack.
 */
function resourceDigests(stack) {
    const digests = (0, digest_1.computeResourceDigests)(stack.template);
    return Object.entries(digests).map(([logicalId, digest]) => {
        const location = new ResourceLocation(stack, logicalId);
        return [digest, location];
    });
}
/**
 * Compares the deployed state to the cloud assembly state, and finds all resources
 * that were moved from one location (stack + logical ID) to another. The comparison
 * is done per environment.
 */
async function findResourceMovements(stacks, sdkProvider) {
    const stackGroups = new Map();
    // Group stacks by environment
    for (const stack of stacks) {
        const environment = stack.environment;
        const key = (0, digest_1.hashObject)(environment);
        if (stackGroups.has(key)) {
            stackGroups.get(key)[1].push(stack);
        }
        else {
            // The first time we see an environment, we need to fetch all stacks deployed to it.
            const before = await getDeployedStacks(sdkProvider, environment);
            stackGroups.set(key, [before, [stack]]);
        }
    }
    const result = [];
    for (const [_, [before, after]] of stackGroups) {
        result.push(...resourceMovements(before, after));
    }
    return result;
}
async function getDeployedStacks(sdkProvider, environment) {
    const cfn = (await sdkProvider.forEnvironment(environment, plugin_1.Mode.ForReading)).sdk.cloudFormation();
    const summaries = await cfn.paginatedListStacks({
        StackStatusFilter: [
            'CREATE_COMPLETE',
            'UPDATE_COMPLETE',
            'UPDATE_ROLLBACK_COMPLETE',
            'IMPORT_COMPLETE',
            'ROLLBACK_COMPLETE',
        ],
    });
    const normalize = async (summary) => {
        const templateCommandOutput = await cfn.getTemplate({ StackName: summary.StackName });
        const template = (0, util_1.deserializeStructure)(templateCommandOutput.TemplateBody ?? '{}');
        return {
            environment,
            stackName: summary.StackName,
            template,
        };
    };
    // eslint-disable-next-line @cdklabs/promiseall-no-unbounded-parallelism
    return Promise.all(summaries.map(normalize));
}
function formatTypedMappings(mappings) {
    const stream = new streams_1.StringWriteStream();
    (0, cloudformation_diff_1.formatTypedMappings)(stream, mappings);
    return stream.toString();
}
function formatAmbiguousMappings(paths) {
    const stream = new streams_1.StringWriteStream();
    (0, cloudformation_diff_1.formatAmbiguousMappings)(stream, paths);
    return stream.toString();
}
//# sourceMappingURL=data:application/json;base64,