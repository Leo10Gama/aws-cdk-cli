"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EcsHotswapProperties = exports.HotswapPropertyOverrides = exports.HotswapMode = exports.ICON = void 0;
exports.classifyChanges = classifyChanges;
exports.nonHotswappableChange = nonHotswappableChange;
exports.nonHotswappableResource = nonHotswappableResource;
const hotswap_1 = require("../../payloads/hotswap");
const toolkit_error_1 = require("../toolkit-error");
exports.ICON = 'âœ¨';
var HotswapMode;
(function (HotswapMode) {
    /**
     * Will fall back to CloudFormation when a non-hotswappable change is detected
     */
    HotswapMode["FALL_BACK"] = "fall-back";
    /**
     * Will not fall back to CloudFormation when a non-hotswappable change is detected
     */
    HotswapMode["HOTSWAP_ONLY"] = "hotswap-only";
    /**
     * Will not attempt to hotswap anything and instead go straight to CloudFormation
     */
    HotswapMode["FULL_DEPLOYMENT"] = "full-deployment";
})(HotswapMode || (exports.HotswapMode = HotswapMode = {}));
/**
 * Represents configuration property overrides for hotswap deployments
 */
class HotswapPropertyOverrides {
    // Each supported resource type will have its own properties. Currently this is ECS
    ecsHotswapProperties;
    constructor(ecsHotswapProperties) {
        this.ecsHotswapProperties = ecsHotswapProperties;
    }
}
exports.HotswapPropertyOverrides = HotswapPropertyOverrides;
/**
 * Represents configuration properties for ECS hotswap deployments
 */
class EcsHotswapProperties {
    // The lower limit on the number of your service's tasks that must remain in the RUNNING state during a deployment, as a percentage of the desiredCount
    minimumHealthyPercent;
    // The upper limit on the number of your service's tasks that are allowed in the RUNNING or PENDING state during a deployment, as a percentage of the desiredCount
    maximumHealthyPercent;
    constructor(minimumHealthyPercent, maximumHealthyPercent) {
        if (minimumHealthyPercent !== undefined && minimumHealthyPercent < 0) {
            throw new toolkit_error_1.ToolkitError('hotswap-ecs-minimum-healthy-percent can\'t be a negative number');
        }
        if (maximumHealthyPercent !== undefined && maximumHealthyPercent < 0) {
            throw new toolkit_error_1.ToolkitError('hotswap-ecs-maximum-healthy-percent can\'t be a negative number');
        }
        // In order to preserve the current behaviour, when minimumHealthyPercent is not defined, it will be set to the currently default value of 0
        if (minimumHealthyPercent == undefined) {
            this.minimumHealthyPercent = 0;
        }
        else {
            this.minimumHealthyPercent = minimumHealthyPercent;
        }
        this.maximumHealthyPercent = maximumHealthyPercent;
    }
    /**
     * Check if any hotswap properties are defined
     * @returns true if all properties are undefined, false otherwise
     */
    isEmpty() {
        return this.minimumHealthyPercent === 0 && this.maximumHealthyPercent === undefined;
    }
}
exports.EcsHotswapProperties = EcsHotswapProperties;
class ClassifiedChanges {
    change;
    hotswappableProps;
    nonHotswappableProps;
    constructor(change, hotswappableProps, nonHotswappableProps) {
        this.change = change;
        this.hotswappableProps = hotswappableProps;
        this.nonHotswappableProps = nonHotswappableProps;
    }
    reportNonHotswappablePropertyChanges(ret) {
        const nonHotswappablePropNames = Object.keys(this.nonHotswappableProps);
        if (nonHotswappablePropNames.length > 0) {
            const tagOnlyChange = nonHotswappablePropNames.length === 1 && nonHotswappablePropNames[0] === 'Tags';
            const reason = tagOnlyChange ? hotswap_1.NonHotswappableReason.TAGS : hotswap_1.NonHotswappableReason.PROPERTIES;
            const description = tagOnlyChange ? 'Tags are not hotswappable' : `resource properties '${nonHotswappablePropNames}' are not hotswappable on this resource type`;
            ret.push(nonHotswappableChange(this.change, reason, description, this.nonHotswappableProps));
        }
    }
    get namesOfHotswappableProps() {
        return Object.keys(this.hotswappableProps);
    }
}
function classifyChanges(xs, hotswappablePropNames) {
    const hotswappableProps = {};
    const nonHotswappableProps = {};
    for (const [name, propDiff] of Object.entries(xs.propertyUpdates)) {
        if (hotswappablePropNames.includes(name)) {
            hotswappableProps[name] = propDiff;
        }
        else {
            nonHotswappableProps[name] = propDiff;
        }
    }
    return new ClassifiedChanges(xs, hotswappableProps, nonHotswappableProps);
}
function nonHotswappableChange(change, reason, description, nonHotswappableProps, hotswapOnlyVisible = true) {
    return {
        hotswappable: false,
        hotswapOnlyVisible,
        change: {
            reason,
            description,
            subject: {
                type: 'Resource',
                logicalId: change.logicalId,
                resourceType: change.newValue.Type,
                rejectedProperties: Object.keys(nonHotswappableProps ?? change.propertyUpdates),
                metadata: change.metadata,
            },
        },
    };
}
function nonHotswappableResource(change) {
    return {
        hotswappable: false,
        change: {
            reason: hotswap_1.NonHotswappableReason.RESOURCE_UNSUPPORTED,
            description: 'This resource type is not supported for hotswap deployments',
            subject: {
                type: 'Resource',
                logicalId: change.logicalId,
                resourceType: change.newValue.Type,
                rejectedProperties: Object.keys(change.propertyUpdates),
                metadata: change.metadata,
            },
        },
    };
}
//# sourceMappingURL=data:application/json;base64,