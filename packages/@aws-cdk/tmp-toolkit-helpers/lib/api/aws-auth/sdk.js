"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SDK = void 0;
const client_appsync_1 = require("@aws-sdk/client-appsync");
const client_cloudcontrol_1 = require("@aws-sdk/client-cloudcontrol");
const client_cloudformation_1 = require("@aws-sdk/client-cloudformation");
const client_cloudwatch_logs_1 = require("@aws-sdk/client-cloudwatch-logs");
const client_codebuild_1 = require("@aws-sdk/client-codebuild");
const client_ec2_1 = require("@aws-sdk/client-ec2");
const client_ecr_1 = require("@aws-sdk/client-ecr");
const client_ecs_1 = require("@aws-sdk/client-ecs");
const client_elastic_load_balancing_v2_1 = require("@aws-sdk/client-elastic-load-balancing-v2");
const client_iam_1 = require("@aws-sdk/client-iam");
const client_kms_1 = require("@aws-sdk/client-kms");
const client_lambda_1 = require("@aws-sdk/client-lambda");
const client_route_53_1 = require("@aws-sdk/client-route-53");
const client_s3_1 = require("@aws-sdk/client-s3");
const client_secrets_manager_1 = require("@aws-sdk/client-secrets-manager");
const client_sfn_1 = require("@aws-sdk/client-sfn");
const client_ssm_1 = require("@aws-sdk/client-ssm");
const client_sts_1 = require("@aws-sdk/client-sts");
const lib_storage_1 = require("@aws-sdk/lib-storage");
const middleware_endpoint_1 = require("@smithy/middleware-endpoint");
const util_retry_1 = require("@smithy/util-retry");
const account_cache_1 = require("./account-cache");
const cached_1 = require("./cached");
const tracing_1 = require("./tracing");
const user_agent_1 = require("./user-agent");
const util_1 = require("../../util");
const private_1 = require("../io/private");
const toolkit_error_1 = require("../toolkit-error");
/**
 * Base functionality of SDK without credential fetching
 */
let SDK = class SDK {
    credProvider;
    currentRegion;
    config;
    logger;
    accountCache;
    /**
     * STS is used to check credential validity, don't do too many retries.
     */
    stsRetryStrategy = new util_retry_1.ConfiguredRetryStrategy(3, (attempt) => 100 * (2 ** attempt));
    /**
     * Whether we have proof that the credentials have not expired
     *
     * We need to do some manual plumbing around this because the JS SDKv2 treats `ExpiredToken`
     * as retriable and we have hefty retries on CFN calls making the CLI hang for a good 15 minutes
     * if the credentials have expired.
     */
    _credentialsValidated = false;
    /**
     * A function to create debug messages
     */
    debug;
    constructor(credProvider, region, requestHandler, ioHelper, logger) {
        this.credProvider = credProvider;
        const debugFn = async (msg) => ioHelper.notify(private_1.IO.DEFAULT_SDK_DEBUG.msg(msg));
        this.accountCache = new account_cache_1.AccountAccessKeyCache(account_cache_1.AccountAccessKeyCache.DEFAULT_PATH, debugFn);
        this.debug = debugFn;
        this.config = {
            region,
            credentials: credProvider,
            requestHandler,
            retryStrategy: new util_retry_1.ConfiguredRetryStrategy(7, (attempt) => 300 * (2 ** attempt)),
            customUserAgent: (0, user_agent_1.defaultCliUserAgent)(),
            logger,
        };
        this.logger = logger;
        this.currentRegion = region;
    }
    appendCustomUserAgent(userAgentData) {
        if (!userAgentData) {
            return;
        }
        const currentCustomUserAgent = this.config.customUserAgent;
        this.config.customUserAgent = currentCustomUserAgent ? `${currentCustomUserAgent} ${userAgentData}` : userAgentData;
    }
    removeCustomUserAgent(userAgentData) {
        this.config.customUserAgent = this.config.customUserAgent?.replace(userAgentData, '');
    }
    appsync() {
        const client = new client_appsync_1.AppSyncClient(this.config);
        return {
            getSchemaCreationStatus: (input) => client.send(new client_appsync_1.GetSchemaCreationStatusCommand(input)),
            startSchemaCreation: (input) => client.send(new client_appsync_1.StartSchemaCreationCommand(input)),
            updateApiKey: (input) => client.send(new client_appsync_1.UpdateApiKeyCommand(input)),
            updateFunction: (input) => client.send(new client_appsync_1.UpdateFunctionCommand(input)),
            updateResolver: (input) => client.send(new client_appsync_1.UpdateResolverCommand(input)),
            // Pagination Functions
            listFunctions: async (input) => {
                const functions = Array();
                const paginator = (0, client_appsync_1.paginateListFunctions)({ client }, input);
                for await (const page of paginator) {
                    functions.push(...(page.functions || []));
                }
                return functions;
            },
        };
    }
    cloudControl() {
        const client = new client_cloudcontrol_1.CloudControlClient(this.config);
        return {
            listResources: (input) => client.send(new client_cloudcontrol_1.ListResourcesCommand(input)),
            getResource: (input) => client.send(new client_cloudcontrol_1.GetResourceCommand(input)),
        };
    }
    cloudFormation() {
        const client = new client_cloudformation_1.CloudFormationClient({
            ...this.config,
            retryStrategy: new util_retry_1.ConfiguredRetryStrategy(11, (attempt) => 1000 * (2 ** attempt)),
        });
        return {
            continueUpdateRollback: async (input) => client.send(new client_cloudformation_1.ContinueUpdateRollbackCommand(input)),
            createChangeSet: (input) => client.send(new client_cloudformation_1.CreateChangeSetCommand(input)),
            createGeneratedTemplate: (input) => client.send(new client_cloudformation_1.CreateGeneratedTemplateCommand(input)),
            createStack: (input) => client.send(new client_cloudformation_1.CreateStackCommand(input)),
            deleteChangeSet: (input) => client.send(new client_cloudformation_1.DeleteChangeSetCommand(input)),
            deleteGeneratedTemplate: (input) => client.send(new client_cloudformation_1.DeleteGeneratedTemplateCommand(input)),
            deleteStack: (input) => client.send(new client_cloudformation_1.DeleteStackCommand(input)),
            detectStackDrift: (input) => client.send(new client_cloudformation_1.DetectStackDriftCommand(input)),
            detectStackResourceDrift: (input) => client.send(new client_cloudformation_1.DetectStackResourceDriftCommand(input)),
            describeChangeSet: (input) => client.send(new client_cloudformation_1.DescribeChangeSetCommand(input)),
            describeGeneratedTemplate: (input) => client.send(new client_cloudformation_1.DescribeGeneratedTemplateCommand(input)),
            describeResourceScan: (input) => client.send(new client_cloudformation_1.DescribeResourceScanCommand(input)),
            describeStackDriftDetectionStatus: (input) => client.send(new client_cloudformation_1.DescribeStackDriftDetectionStatusCommand(input)),
            describeStackResourceDrifts: (input) => client.send(new client_cloudformation_1.DescribeStackResourceDriftsCommand(input)),
            describeStacks: (input) => client.send(new client_cloudformation_1.DescribeStacksCommand(input)),
            describeStackResources: (input) => client.send(new client_cloudformation_1.DescribeStackResourcesCommand(input)),
            executeChangeSet: (input) => client.send(new client_cloudformation_1.ExecuteChangeSetCommand(input)),
            getGeneratedTemplate: (input) => client.send(new client_cloudformation_1.GetGeneratedTemplateCommand(input)),
            getTemplate: (input) => client.send(new client_cloudformation_1.GetTemplateCommand(input)),
            getTemplateSummary: (input) => client.send(new client_cloudformation_1.GetTemplateSummaryCommand(input)),
            listExports: (input) => client.send(new client_cloudformation_1.ListExportsCommand(input)),
            listResourceScanRelatedResources: (input) => client.send(new client_cloudformation_1.ListResourceScanRelatedResourcesCommand(input)),
            listResourceScanResources: (input) => client.send(new client_cloudformation_1.ListResourceScanResourcesCommand(input)),
            listResourceScans: (input) => client.send(new client_cloudformation_1.ListResourceScansCommand(input)),
            listStacks: (input) => client.send(new client_cloudformation_1.ListStacksCommand(input)),
            rollbackStack: (input) => client.send(new client_cloudformation_1.RollbackStackCommand(input)),
            startResourceScan: (input) => client.send(new client_cloudformation_1.StartResourceScanCommand(input)),
            updateStack: (input) => client.send(new client_cloudformation_1.UpdateStackCommand(input)),
            updateTerminationProtection: (input) => client.send(new client_cloudformation_1.UpdateTerminationProtectionCommand(input)),
            describeStackEvents: (input) => {
                return client.send(new client_cloudformation_1.DescribeStackEventsCommand(input));
            },
            listStackResources: async (input) => {
                const stackResources = Array();
                const paginator = (0, client_cloudformation_1.paginateListStackResources)({ client }, input);
                for await (const page of paginator) {
                    stackResources.push(...(page?.StackResourceSummaries || []));
                }
                return stackResources;
            },
            paginatedListStacks: async (input) => {
                const stackResources = Array();
                const paginator = (0, client_cloudformation_1.paginateListStacks)({ client }, input);
                for await (const page of paginator) {
                    stackResources.push(...(page?.StackSummaries || []));
                }
                return stackResources;
            },
        };
    }
    cloudWatchLogs() {
        const client = new client_cloudwatch_logs_1.CloudWatchLogsClient(this.config);
        return {
            describeLogGroups: (input) => client.send(new client_cloudwatch_logs_1.DescribeLogGroupsCommand(input)),
            filterLogEvents: (input) => client.send(new client_cloudwatch_logs_1.FilterLogEventsCommand(input)),
        };
    }
    codeBuild() {
        const client = new client_codebuild_1.CodeBuildClient(this.config);
        return {
            updateProject: (input) => client.send(new client_codebuild_1.UpdateProjectCommand(input)),
        };
    }
    ec2() {
        const client = new client_ec2_1.EC2Client(this.config);
        return {
            describeAvailabilityZones: (input) => client.send(new client_ec2_1.DescribeAvailabilityZonesCommand(input)),
            describeImages: (input) => client.send(new client_ec2_1.DescribeImagesCommand(input)),
            describeInstances: (input) => client.send(new client_ec2_1.DescribeInstancesCommand(input)),
            describeRouteTables: (input) => client.send(new client_ec2_1.DescribeRouteTablesCommand(input)),
            describeSecurityGroups: (input) => client.send(new client_ec2_1.DescribeSecurityGroupsCommand(input)),
            describeSubnets: (input) => client.send(new client_ec2_1.DescribeSubnetsCommand(input)),
            describeVpcEndpointServices: (input) => client.send(new client_ec2_1.DescribeVpcEndpointServicesCommand(input)),
            describeVpcs: (input) => client.send(new client_ec2_1.DescribeVpcsCommand(input)),
            describeVpnGateways: (input) => client.send(new client_ec2_1.DescribeVpnGatewaysCommand(input)),
        };
    }
    ecr() {
        const client = new client_ecr_1.ECRClient(this.config);
        return {
            batchDeleteImage: (input) => client.send(new client_ecr_1.BatchDeleteImageCommand(input)),
            batchGetImage: (input) => client.send(new client_ecr_1.BatchGetImageCommand(input)),
            createRepository: (input) => client.send(new client_ecr_1.CreateRepositoryCommand(input)),
            describeImages: (input) => client.send(new client_ecr_1.DescribeImagesCommand(input)),
            describeRepositories: (input) => client.send(new client_ecr_1.DescribeRepositoriesCommand(input)),
            getAuthorizationToken: (input) => client.send(new client_ecr_1.GetAuthorizationTokenCommand(input)),
            listImages: (input) => client.send(new client_ecr_1.ListImagesCommand(input)),
            putImage: (input) => client.send(new client_ecr_1.PutImageCommand(input)),
            putImageScanningConfiguration: (input) => client.send(new client_ecr_1.PutImageScanningConfigurationCommand(input)),
        };
    }
    ecs() {
        const client = new client_ecs_1.ECSClient(this.config);
        return {
            listClusters: (input) => client.send(new client_ecs_1.ListClustersCommand(input)),
            registerTaskDefinition: (input) => client.send(new client_ecs_1.RegisterTaskDefinitionCommand(input)),
            updateService: (input) => client.send(new client_ecs_1.UpdateServiceCommand(input)),
            // Waiters
            waitUntilServicesStable: (input) => {
                return (0, client_ecs_1.waitUntilServicesStable)({
                    client,
                    maxWaitTime: 600,
                    minDelay: 6,
                    maxDelay: 6,
                }, input);
            },
        };
    }
    elbv2() {
        const client = new client_elastic_load_balancing_v2_1.ElasticLoadBalancingV2Client(this.config);
        return {
            describeListeners: (input) => client.send(new client_elastic_load_balancing_v2_1.DescribeListenersCommand(input)),
            describeLoadBalancers: (input) => client.send(new client_elastic_load_balancing_v2_1.DescribeLoadBalancersCommand(input)),
            describeTags: (input) => client.send(new client_elastic_load_balancing_v2_1.DescribeTagsCommand(input)),
            // Pagination Functions
            paginateDescribeListeners: async (input) => {
                const listeners = Array();
                const paginator = (0, client_elastic_load_balancing_v2_1.paginateDescribeListeners)({ client }, input);
                for await (const page of paginator) {
                    listeners.push(...(page?.Listeners || []));
                }
                return listeners;
            },
            paginateDescribeLoadBalancers: async (input) => {
                const loadBalancers = Array();
                const paginator = (0, client_elastic_load_balancing_v2_1.paginateDescribeLoadBalancers)({ client }, input);
                for await (const page of paginator) {
                    loadBalancers.push(...(page?.LoadBalancers || []));
                }
                return loadBalancers;
            },
        };
    }
    iam() {
        const client = new client_iam_1.IAMClient(this.config);
        return {
            createPolicy: (input) => client.send(new client_iam_1.CreatePolicyCommand(input)),
            getPolicy: (input) => client.send(new client_iam_1.GetPolicyCommand(input)),
            getRole: (input) => client.send(new client_iam_1.GetRoleCommand(input)),
        };
    }
    kms() {
        const client = new client_kms_1.KMSClient(this.config);
        return {
            describeKey: (input) => client.send(new client_kms_1.DescribeKeyCommand(input)),
            listAliases: (input) => client.send(new client_kms_1.ListAliasesCommand(input)),
        };
    }
    lambda() {
        const client = new client_lambda_1.LambdaClient(this.config);
        return {
            invokeCommand: (input) => client.send(new client_lambda_1.InvokeCommand(input)),
            publishVersion: (input) => client.send(new client_lambda_1.PublishVersionCommand(input)),
            updateAlias: (input) => client.send(new client_lambda_1.UpdateAliasCommand(input)),
            updateFunctionCode: (input) => client.send(new client_lambda_1.UpdateFunctionCodeCommand(input)),
            updateFunctionConfiguration: (input) => client.send(new client_lambda_1.UpdateFunctionConfigurationCommand(input)),
            // Waiters
            waitUntilFunctionUpdated: (delaySeconds, input) => {
                return (0, client_lambda_1.waitUntilFunctionUpdatedV2)({
                    client,
                    maxDelay: delaySeconds,
                    minDelay: delaySeconds,
                    maxWaitTime: delaySeconds * 60,
                }, input);
            },
        };
    }
    route53() {
        const client = new client_route_53_1.Route53Client(this.config);
        return {
            getHostedZone: (input) => client.send(new client_route_53_1.GetHostedZoneCommand(input)),
            listHostedZones: (input) => client.send(new client_route_53_1.ListHostedZonesCommand(input)),
            listHostedZonesByName: (input) => client.send(new client_route_53_1.ListHostedZonesByNameCommand(input)),
        };
    }
    s3() {
        const client = new client_s3_1.S3Client(this.config);
        return {
            deleteObjects: (input) => client.send(new client_s3_1.DeleteObjectsCommand({
                ...input,
                ChecksumAlgorithm: 'SHA256',
            })),
            deleteObjectTagging: (input) => client.send(new client_s3_1.DeleteObjectTaggingCommand(input)),
            getBucketEncryption: (input) => client.send(new client_s3_1.GetBucketEncryptionCommand(input)),
            getBucketLocation: (input) => client.send(new client_s3_1.GetBucketLocationCommand(input)),
            getObject: (input) => client.send(new client_s3_1.GetObjectCommand(input)),
            getObjectTagging: (input) => client.send(new client_s3_1.GetObjectTaggingCommand(input)),
            listObjectsV2: (input) => client.send(new client_s3_1.ListObjectsV2Command(input)),
            putObjectTagging: (input) => client.send(new client_s3_1.PutObjectTaggingCommand({
                ...input,
                ChecksumAlgorithm: 'SHA256',
            })),
            upload: (input) => {
                try {
                    const upload = new lib_storage_1.Upload({
                        client,
                        params: { ...input, ChecksumAlgorithm: 'SHA256' },
                    });
                    return upload.done();
                }
                catch (e) {
                    throw new toolkit_error_1.AuthenticationError(`Upload failed: ${(0, util_1.formatErrorMessage)(e)}`);
                }
            },
        };
    }
    secretsManager() {
        const client = new client_secrets_manager_1.SecretsManagerClient(this.config);
        return {
            getSecretValue: (input) => client.send(new client_secrets_manager_1.GetSecretValueCommand(input)),
        };
    }
    ssm() {
        const client = new client_ssm_1.SSMClient(this.config);
        return {
            getParameter: (input) => client.send(new client_ssm_1.GetParameterCommand(input)),
        };
    }
    stepFunctions() {
        const client = new client_sfn_1.SFNClient(this.config);
        return {
            updateStateMachine: (input) => client.send(new client_sfn_1.UpdateStateMachineCommand(input)),
        };
    }
    /**
     * The AWS SDK v3 requires a client config and a command in order to get an endpoint for
     * any given service.
     */
    async getUrlSuffix(region) {
        const cfn = new client_cloudformation_1.CloudFormationClient({ region });
        const endpoint = await (0, middleware_endpoint_1.getEndpointFromInstructions)({}, client_cloudformation_1.DescribeStackResourcesCommand, { ...cfn.config });
        return endpoint.url.hostname.split(`${region}.`).pop();
    }
    async currentAccount() {
        return (0, cached_1.cachedAsync)(this, CURRENT_ACCOUNT_KEY, async () => {
            const creds = await this.credProvider();
            return this.accountCache.fetch(creds.accessKeyId, async () => {
                // if we don't have one, resolve from STS and store in cache.
                await this.debug('Looking up default account ID from STS');
                const client = new client_sts_1.STSClient({
                    ...this.config,
                    retryStrategy: this.stsRetryStrategy,
                });
                const command = new client_sts_1.GetCallerIdentityCommand({});
                const result = await client.send(command);
                const accountId = result.Account;
                const partition = result.Arn.split(':')[1];
                if (!accountId) {
                    throw new toolkit_error_1.AuthenticationError("STS didn't return an account ID");
                }
                await this.debug(`Default account ID: ${accountId}`);
                // Save another STS call later if this one already succeeded
                this._credentialsValidated = true;
                return { accountId, partition };
            });
        });
    }
    /**
     * Make sure the the current credentials are not expired
     */
    async validateCredentials() {
        if (this._credentialsValidated) {
            return;
        }
        const client = new client_sts_1.STSClient({ ...this.config, retryStrategy: this.stsRetryStrategy });
        await client.send(new client_sts_1.GetCallerIdentityCommand({}));
        this._credentialsValidated = true;
    }
};
exports.SDK = SDK;
exports.SDK = SDK = __decorate([
    tracing_1.traceMemberMethods
], SDK);
const CURRENT_ACCOUNT_KEY = Symbol('current_account_key');
//# sourceMappingURL=data:application/json;base64,