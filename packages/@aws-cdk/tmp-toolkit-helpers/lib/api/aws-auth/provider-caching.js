"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeCachingProvider = makeCachingProvider;
exports.credentialsAboutToExpire = credentialsAboutToExpire;
const property_provider_1 = require("@smithy/property-provider");
/**
 * Wrap a credential provider in a cache
 *
 * Some credential providers in the SDKv3 are cached (the default Node
 * chain, specifically) but most others are not.
 *
 * Since we want to avoid duplicate calls to `AssumeRole`, or duplicate
 * MFA prompts or what have you, we are going to liberally wrap providers
 * in caches which will return the cached value until it expires.
 */
function makeCachingProvider(provider) {
    return (0, property_provider_1.memoize)(provider, credentialsAboutToExpire, (token) => !!token.expiration);
}
function credentialsAboutToExpire(token) {
    const expiryMarginSecs = 5;
    // token.expiration is sometimes null
    return !!token.expiration && token.expiration.getTime() - Date.now() < expiryMarginSecs * 1000;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvdmlkZXItY2FjaGluZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hcGkvYXdzLWF1dGgvcHJvdmlkZXItY2FjaGluZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQWFBLGtEQU1DO0FBRUQsNERBSUM7QUF6QkQsaUVBQW9EO0FBR3BEOzs7Ozs7Ozs7R0FTRztBQUNILFNBQWdCLG1CQUFtQixDQUFDLFFBQXVDO0lBQ3pFLE9BQU8sSUFBQSwyQkFBTyxFQUNaLFFBQVEsRUFDUix3QkFBd0IsRUFDeEIsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUM5QixDQUFDO0FBQ0osQ0FBQztBQUVELFNBQWdCLHdCQUF3QixDQUFDLEtBQTRCO0lBQ25FLE1BQU0sZ0JBQWdCLEdBQUcsQ0FBQyxDQUFDO0lBQzNCLHFDQUFxQztJQUNyQyxPQUFPLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBVSxJQUFJLEtBQUssQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLGdCQUFnQixHQUFHLElBQUksQ0FBQztBQUNqRyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbWVtb2l6ZSB9IGZyb20gJ0BzbWl0aHkvcHJvcGVydHktcHJvdmlkZXInO1xuaW1wb3J0IHR5cGUgeyBBd3NDcmVkZW50aWFsSWRlbnRpdHksIEF3c0NyZWRlbnRpYWxJZGVudGl0eVByb3ZpZGVyIH0gZnJvbSAnQHNtaXRoeS90eXBlcyc7XG5cbi8qKlxuICogV3JhcCBhIGNyZWRlbnRpYWwgcHJvdmlkZXIgaW4gYSBjYWNoZVxuICpcbiAqIFNvbWUgY3JlZGVudGlhbCBwcm92aWRlcnMgaW4gdGhlIFNES3YzIGFyZSBjYWNoZWQgKHRoZSBkZWZhdWx0IE5vZGVcbiAqIGNoYWluLCBzcGVjaWZpY2FsbHkpIGJ1dCBtb3N0IG90aGVycyBhcmUgbm90LlxuICpcbiAqIFNpbmNlIHdlIHdhbnQgdG8gYXZvaWQgZHVwbGljYXRlIGNhbGxzIHRvIGBBc3N1bWVSb2xlYCwgb3IgZHVwbGljYXRlXG4gKiBNRkEgcHJvbXB0cyBvciB3aGF0IGhhdmUgeW91LCB3ZSBhcmUgZ29pbmcgdG8gbGliZXJhbGx5IHdyYXAgcHJvdmlkZXJzXG4gKiBpbiBjYWNoZXMgd2hpY2ggd2lsbCByZXR1cm4gdGhlIGNhY2hlZCB2YWx1ZSB1bnRpbCBpdCBleHBpcmVzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbWFrZUNhY2hpbmdQcm92aWRlcihwcm92aWRlcjogQXdzQ3JlZGVudGlhbElkZW50aXR5UHJvdmlkZXIpOiBBd3NDcmVkZW50aWFsSWRlbnRpdHlQcm92aWRlciB7XG4gIHJldHVybiBtZW1vaXplKFxuICAgIHByb3ZpZGVyLFxuICAgIGNyZWRlbnRpYWxzQWJvdXRUb0V4cGlyZSxcbiAgICAodG9rZW4pID0+ICEhdG9rZW4uZXhwaXJhdGlvbixcbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWRlbnRpYWxzQWJvdXRUb0V4cGlyZSh0b2tlbjogQXdzQ3JlZGVudGlhbElkZW50aXR5KSB7XG4gIGNvbnN0IGV4cGlyeU1hcmdpblNlY3MgPSA1O1xuICAvLyB0b2tlbi5leHBpcmF0aW9uIGlzIHNvbWV0aW1lcyBudWxsXG4gIHJldHVybiAhIXRva2VuLmV4cGlyYXRpb24gJiYgdG9rZW4uZXhwaXJhdGlvbi5nZXRUaW1lKCkgLSBEYXRlLm5vdygpIDwgZXhwaXJ5TWFyZ2luU2VjcyAqIDEwMDA7XG59XG4iXX0=