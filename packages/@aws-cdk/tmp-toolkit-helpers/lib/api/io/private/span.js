"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SpanMaker = void 0;
const util = require("node:util");
const uuid = require("uuid");
const util_1 = require("../../../util");
/**
 * Helper class to make spans around blocks of work
 *
 * Blocks are enclosed by a start and end message.
 * All messages of the span share a unique id.
 * The end message contains the time passed between start and end.
 */
class SpanMaker {
    definition;
    ioHelper;
    constructor(ioHelper, definition) {
        this.definition = definition;
        this.ioHelper = ioHelper;
    }
    async begin(a, b) {
        const spanId = uuid.v4();
        const startTime = new Date().getTime();
        const notify = (msg) => {
            return this.ioHelper.notify(withSpanId(spanId, msg));
        };
        const startInput = parseArgs(a, b);
        const startMsg = startInput.message ?? `Starting ${this.definition.name} ...`;
        const startPayload = startInput.payload;
        await notify(this.definition.start.msg(startMsg, startPayload));
        const timingMsgTemplate = '\nâœ¨  %s time: %ds\n';
        const time = () => {
            const elapsedTime = new Date().getTime() - startTime;
            return {
                asMs: elapsedTime,
                asSec: (0, util_1.formatTime)(elapsedTime),
            };
        };
        return {
            elapsedTime: async () => {
                return time();
            },
            notify: async (msg) => {
                await notify(msg);
            },
            timing: async (maker, message) => {
                const duration = time();
                const timingMsg = message ? message : util.format(timingMsgTemplate, this.definition.name, duration.asSec);
                await notify(maker.msg(timingMsg, {
                    duration: duration.asMs,
                }));
                return duration;
            },
            end: async (x, y) => {
                const duration = time();
                const endInput = parseArgs(x, y);
                const endMsg = endInput.message ?? util.format(timingMsgTemplate, this.definition.name, duration.asSec);
                const endPayload = endInput.payload;
                await notify(this.definition.end.msg(endMsg, {
                    duration: duration.asMs,
                    ...endPayload,
                }));
                return duration;
            },
        };
    }
}
exports.SpanMaker = SpanMaker;
function parseArgs(first, second) {
    const firstIsMessage = typeof first === 'string';
    // When the first argument is a string or we have a second argument, then the first arg is the message
    const message = (firstIsMessage || second) ? first : undefined;
    // When the first argument is a string or we have a second argument,
    // then the second arg is the payload, otherwise the first arg is the payload
    const payload = (firstIsMessage || second) ? second : first;
    return {
        message,
        payload,
    };
}
function withSpanId(span, message) {
    return {
        ...message,
        span,
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Bhbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hcGkvaW8vcHJpdmF0ZS9zcGFuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLGtDQUFrQztBQUNsQyw2QkFBNkI7QUFJN0Isd0NBQTJDO0FBaUYzQzs7Ozs7O0dBTUc7QUFDSCxNQUFhLFNBQVM7SUFDSCxVQUFVLENBQXVCO0lBQ2pDLFFBQVEsQ0FBVztJQUVwQyxZQUFtQixRQUFrQixFQUFFLFVBQWdDO1FBQ3JFLElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO1FBQzdCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0lBQzNCLENBQUM7SUFRTSxLQUFLLENBQUMsS0FBSyxDQUFDLENBQU0sRUFBRSxDQUFLO1FBQzlCLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQztRQUN6QixNQUFNLFNBQVMsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBRXZDLE1BQU0sTUFBTSxHQUFHLENBQUMsR0FBK0IsRUFBaUIsRUFBRTtZQUNoRSxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN2RCxDQUFDLENBQUM7UUFFRixNQUFNLFVBQVUsR0FBRyxTQUFTLENBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3RDLE1BQU0sUUFBUSxHQUFHLFVBQVUsQ0FBQyxPQUFPLElBQUksWUFBWSxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksTUFBTSxDQUFDO1FBQzlFLE1BQU0sWUFBWSxHQUFHLFVBQVUsQ0FBQyxPQUFPLENBQUM7UUFFeEMsTUFBTSxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUNwQyxRQUFRLEVBQ1IsWUFBWSxDQUNiLENBQUMsQ0FBQztRQUVILE1BQU0s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aW1wb3J0ICogYXMgdXVpZCBmcm9tICd1dWlkJztcbmltcG9ydCB0eXBlIHsgQWN0aW9uTGVzc01lc3NhZ2UsIElvSGVscGVyIH0gZnJvbSAnLi9pby1oZWxwZXInO1xuaW1wb3J0IHR5cGUgeyBJb01lc3NhZ2VNYWtlciB9IGZyb20gJy4vbWVzc2FnZS1tYWtlcic7XG5pbXBvcnQgdHlwZSB7IER1cmF0aW9uIH0gZnJvbSAnLi4vLi4vLi4vcGF5bG9hZHMvdHlwZXMnO1xuaW1wb3J0IHsgZm9ybWF0VGltZSB9IGZyb20gJy4uLy4uLy4uL3V0aWwnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFNwYW5FbmQge1xuICByZWFkb25seSBkdXJhdGlvbjogbnVtYmVyO1xufVxuXG4vKipcbiAqIERlc2NyaWJlcyBhIHNwZWNpZmljIHNwYW5cbiAqXG4gKiBBIHNwYW4gZGVmaW5pdGlvbiBpcyBhIHBhaXIgb2YgYElvTWVzc2FnZU1ha2VyYHMgdG8gY3JlYXRlIGEgc3RhcnQgYW5kIGVuZCBtZXNzYWdlIG9mIHRoZSBzcGFuIHJlc3BlY3RpdmVseS5cbiAqIEl0IGFsc28gaGFzIGEgZGlzcGxheSBuYW1lLCB0aGF0IGlzIHVzZWQgZm9yIGF1dG8tZ2VuZXJhdGVkIG1lc3NhZ2UgdGV4dCB3aGVuIHRoZXkgYXJlIG5vdCBwcm92aWRlZC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTcGFuRGVmaW5pdGlvbjxTIGV4dGVuZHMgb2JqZWN0LCBFIGV4dGVuZHMgU3BhbkVuZD4ge1xuICByZWFkb25seSBuYW1lOiBzdHJpbmc7XG4gIHJlYWRvbmx5IHN0YXJ0OiBJb01lc3NhZ2VNYWtlcjxTPjtcbiAgcmVhZG9ubHkgZW5kOiBJb01lc3NhZ2VNYWtlcjxFPjtcbn1cblxuLyoqXG4gKiBVc2VkIGluIGNvbmRpdGlvbmFsIHR5cGVzIHRvIGNoZWNrIGlmIGEgdHlwZSAoZS5nLiBhZnRlciBvbWl0dGluZyBmaWVsZHMpIGlzIGFuIGVtcHR5IG9iamVjdFxuICogVGhpcyBpcyBuZWVkZWQgYmVjYXVzZSBjb3VudGVyLWludHVpdGl2ZSBuZWl0aGVyIGBvYmplY3RgIG5vciBge31gIHJlcHJlc2VudCB0aGF0LlxuICovXG50eXBlIEVtcHR5T2JqZWN0ID0ge1xuICBbaW5kZXg6IHN0cmluZyB8IG51bWJlciB8IHN5bWJvbF06IG5ldmVyO1xufVxuXG4vKipcbiAqIEhlbHBlciB0eXBlIHRvIGZvcmNlIGEgcGFyYW1ldGVyIHRvIGJlIG5vdCBwcmVzZW50IG9mIHRoZSBjb21wdXRlZCB0eXBlIGlzIGFuIGVtcHR5IG9iamVjdFxuICovXG50eXBlIFZvaWRXaGVuRW1wdHk8VD4gPSBUIGV4dGVuZHMgRW1wdHlPYmplY3QgPyB2b2lkIDogVFxuXG4vKipcbiAqIEhlbHBlciB0eXBlIHRvIGZvcmNlIGEgcGFyYW1ldGVyIHRvIGJlIGFuIGVtcHR5IG9iamVjdCBpZiB0aGUgY29tcHV0ZWQgdHlwZSBpcyBhbiBlbXB0eSBvYmplY3RcbiAqIFRoaXMgaXMgd2VpcmQsIGJ1dCBzb21lIGNvbXB1dGVkIHR5cGVzIChlLmcuIHVzaW5nIGBPbWl0YCkgZG9uJ3QgZW5kIHVwIGVuZm9yY2luZyB0aGlzLlxuICovXG50eXBlIEZvcmNlRW1wdHk8VD4gPSBUIGV4dGVuZHMgRW1wdHlPYmplY3QgPyBFbXB0eU9iamVjdCA6IFRcblxuLyoqXG4gKiBNYWtlIHNvbWUgcHJvcGVydGllcyBvcHRpb25hbFxuICovXG50eXBlIE9wdGlvbmFsPFQsIEsgZXh0ZW5kcyBrZXlvZiBUPiA9IFBpY2s8UGFydGlhbDxUPiwgSz4gJiBPbWl0PFQsIEs+O1xuXG4vKipcbiAqIEVuZGluZyB0aGUgc3BhbiByZXR1cm5zIHRoZSBvYnNlcnZlZCBkdXJhdGlvblxuICovXG5pbnRlcmZhY2UgRWxhcHNlZFRpbWUge1xuICByZWFkb25seSBhc01zOiBudW1iZXI7XG4gIHJlYWRvbmx5IGFzU2VjOiBudW1iZXI7XG59XG5cbi8qKlxuICogQSBtZXNzYWdlIHNwYW4gdGhhdCBjYW4gYmUgZW5kZWQgYW5kIHJlYWQgdGltZXMgZnJvbVxuICovXG5leHBvcnQgaW50ZXJmYWNlIElNZXNzYWdlU3BhbjxFIGV4dGVuZHMgU3BhbkVuZD4ge1xuICAvKipcbiAgICogR2V0IHRoZSB0aW1lIGVsYXBzZWQgc2luY2UgdGhlIHN0YXJ0XG4gICAqL1xuICBlbGFwc2VkVGltZSgpOiBQcm9taXNlPEVsYXBzZWRUaW1lPjtcbiAgLyoqXG4gICAqIFNlbmRzIGEgc2ltcGxlLCBnZW5lcmljIG1lc3NhZ2Ugd2l0aCB0aGUgY3VycmVudCB0aW1pbmdcbiAgICogRm9yIG1vcmUgY29tcGxleCBpbnRlcm1lZGlhdGUgbWVzc2FnZXMsIGdldCB0aGUgYGVsYXBzZWRUaW1lYCBhbmQgdXNlIGBub3RpZnlgXG4gICAqL1xuICB0aW1pbmcobWFrZXI6IElvTWVzc2FnZU1ha2VyPER1cmF0aW9uPiwgbWVzc2FnZT86IHN0cmluZyk6IFByb21pc2U8RWxhcHNlZFRpbWU+O1xuICAvKipcbiAgICogU2VuZHMgYW4gYXJiaXRyYXJ5IGludGVybWVkaWF0ZSBtZXNzYWdlIGFzIHBhcnQgb2YgdGhlIHNwYW5cbiAgICovXG4gIG5vdGlmeShtZXNzYWdlOiBBY3Rpb25MZXNzTWVzc2FnZTx1bmtub3duPik6IFByb21pc2U8dm9pZD47XG4gIC8qKlxuICAgKiBFbmQgdGhlIHNwYW4gd2l0aCBhIHBheWxvYWRcbiAgICovXG4gIGVuZChwYXlsb2FkOiBWb2lkV2hlbkVtcHR5PE9taXQ8RSwga2V5b2YgU3BhbkVuZD4+KTogUHJvbWlzZTxFbGFwc2VkVGltZT47XG4gIC8qKlxuICAgKiBFbmQgdGhlIHNwYW4gd2l0aCBhIHBheWxvYWQsIG92ZXJ3cml0aW5nXG4gICAqL1xuICBlbmQocGF5bG9hZDogVm9pZFdoZW5FbXB0eTxPcHRpb25hbDxFLCBrZXlvZiBTcGFuRW5kPj4pOiBQcm9taXNlPEVsYXBzZWRUaW1lPjtcbiAgLyoqXG4gICAqIEVuZCB0aGUgc3BhbiB3aXRoIGEgbWVzc2FnZSBhbmQgcGF5bG9hZFxuICAgKi9cbiAgZW5kKG1lc3NhZ2U6IHN0cmluZywgcGF5bG9hZDogRm9yY2VFbXB0eTxPcHRpb25hbDxFLCBrZXlvZiBTcGFuRW5kPj4pOiBQcm9taXNlPEVsYXBzZWRUaW1lPjtcbn1cblxuLyoqXG4gKiBIZWxwZXIgY2xhc3MgdG8gbWFrZSBzcGFucyBhcm91bmQgYmxvY2tzIG9mIHdvcmtcbiAqXG4gKiBCbG9ja3MgYXJlIGVuY2xvc2VkIGJ5IGEgc3RhcnQgYW5kIGVuZCBtZXNzYWdlLlxuICogQWxsIG1lc3NhZ2VzIG9mIHRoZSBzcGFuIHNoYXJlIGEgdW5pcXVlIGlkLlxuICogVGhlIGVuZCBtZXNzYWdlIGNvbnRhaW5zIHRoZSB0aW1lIHBhc3NlZCBiZXR3ZWVuIHN0YXJ0IGFuZCBlbmQuXG4gKi9cbmV4cG9ydCBjbGFzcyBTcGFuTWFrZXI8UyBleHRlbmRzIG9iamVjdCwgRSBleHRlbmRzIFNwYW5FbmQ+IHtcbiAgcHJpdmF0ZSByZWFkb25seSBkZWZpbml0aW9uOiBTcGFuRGVmaW5pdGlvbjxTLCBFPjtcbiAgcHJpdmF0ZSByZWFkb25seSBpb0hlbHBlcjogSW9IZWxwZXI7XG5cbiAgcHVibGljIGNvbnN0cnVjdG9yKGlvSGVscGVyOiBJb0hlbHBlciwgZGVmaW5pdGlvbjogU3BhbkRlZmluaXRpb248UywgRT4pIHtcbiAgICB0aGlzLmRlZmluaXRpb24gPSBkZWZpbml0aW9uO1xuICAgIHRoaXMuaW9IZWxwZXIgPSBpb0hlbHBlcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdGFydHMgdGhlIHNwYW4gYW5kIGluaXRpYWxseSBub3RpZmllcyB0aGUgSW9Ib3N0XG4gICAqIEByZXR1cm5zIGEgbWVzc2FnZSBzcGFuXG4gICAqL1xuICBwdWJsaWMgYXN5bmMgYmVnaW4ocGF5bG9hZDogVm9pZFdoZW5FbXB0eTxTPik6IFByb21pc2U8SU1lc3NhZ2VTcGFuPEU+PjtcbiAgcHVibGljIGFzeW5jIGJlZ2luKG1lc3NhZ2U6IHN0cmluZywgcGF5bG9hZDogUyk6IFByb21pc2U8SU1lc3NhZ2VTcGFuPEU+PjtcbiAgcHVibGljIGFzeW5jIGJlZ2luKGE6IGFueSwgYj86IFMpOiBQcm9taXNlPElNZXNzYWdlU3BhbjxFPj4ge1xuICAgIGNvbnN0IHNwYW5JZCA9IHV1aWQudjQoKTtcbiAgICBjb25zdCBzdGFydFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcblxuICAgIGNvbnN0IG5vdGlmeSA9IChtc2c6IEFjdGlvbkxlc3NNZXNzYWdlPHVua25vd24+KTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gICAgICByZXR1cm4gdGhpcy5pb0hlbHBlci5ub3RpZnkod2l0aFNwYW5JZChzcGFuSWQsIG1zZykpO1xuICAgIH07XG5cbiAgICBjb25zdCBzdGFydElucHV0ID0gcGFyc2VBcmdzPFM+KGEsIGIpO1xuICAgIGNvbnN0IHN0YXJ0TXNnID0gc3RhcnRJbnB1dC5tZXNzYWdlID8/IGBTdGFydGluZyAke3RoaXMuZGVmaW5pdGlvbi5uYW1lfSAuLi5gO1xuICAgIGNvbnN0IHN0YXJ0UGF5bG9hZCA9IHN0YXJ0SW5wdXQucGF5bG9hZDtcblxuICAgIGF3YWl0IG5vdGlmeSh0aGlzLmRlZmluaXRpb24uc3RhcnQubXNnKFxuICAgICAgc3RhcnRNc2csXG4gICAgICBzdGFydFBheWxvYWQsXG4gICAgKSk7XG5cbiAgICBjb25zdCB0aW1pbmdNc2dUZW1wbGF0ZSA9ICdcXG7inKggICVzIHRpbWU6ICVkc1xcbic7XG4gICAgY29uc3QgdGltZSA9ICgpID0+IHtcbiAgICAgIGNvbnN0IGVsYXBzZWRUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCkgLSBzdGFydFRpbWU7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBhc01zOiBlbGFwc2VkVGltZSxcbiAgICAgICAgYXNTZWM6IGZvcm1hdFRpbWUoZWxhcHNlZFRpbWUpLFxuICAgICAgfTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGVsYXBzZWRUaW1lOiBhc3luYyAoKTogUHJvbWlzZTxFbGFwc2VkVGltZT4gPT4ge1xuICAgICAgICByZXR1cm4gdGltZSgpO1xuICAgICAgfSxcblxuICAgICAgbm90aWZ5OiBhc3luYyhtc2c6IEFjdGlvbkxlc3NNZXNzYWdlPHVua25vd24+KTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gICAgICAgIGF3YWl0IG5vdGlmeShtc2cpO1xuICAgICAgfSxcblxuICAgICAgdGltaW5nOiBhc3luYyhtYWtlcjogSW9NZXNzYWdlTWFrZXI8RHVyYXRpb24+LCBtZXNzYWdlPzogc3RyaW5nKTogUHJvbWlzZTxFbGFwc2VkVGltZT4gPT4ge1xuICAgICAgICBjb25zdCBkdXJhdGlvbiA9IHRpbWUoKTtcbiAgICAgICAgY29uc3QgdGltaW5nTXNnID0gbWVzc2FnZSA/IG1lc3NhZ2UgOiB1dGlsLmZvcm1hdCh0aW1pbmdNc2dUZW1wbGF0ZSwgdGhpcy5kZWZpbml0aW9uLm5hbWUsIGR1cmF0aW9uLmFzU2VjKTtcbiAgICAgICAgYXdhaXQgbm90aWZ5KG1ha2VyLm1zZyh0aW1pbmdNc2csIHtcbiAgICAgICAgICBkdXJhdGlvbjogZHVyYXRpb24uYXNNcyxcbiAgICAgICAgfSkpO1xuICAgICAgICByZXR1cm4gZHVyYXRpb247XG4gICAgICB9LFxuXG4gICAgICBlbmQ6IGFzeW5jICh4OiBhbnksIHk/OiBGb3JjZUVtcHR5PE9wdGlvbmFsPEUsIGtleW9mIFNwYW5FbmQ+Pik6IFByb21pc2U8RWxhcHNlZFRpbWU+ID0+IHtcbiAgICAgICAgY29uc3QgZHVyYXRpb24gPSB0aW1lKCk7XG5cbiAgICAgICAgY29uc3QgZW5kSW5wdXQgPSBwYXJzZUFyZ3M8Rm9yY2VFbXB0eTxPcHRpb25hbDxFLCBrZXlvZiBTcGFuRW5kPj4+KHgsIHkpO1xuICAgICAgICBjb25zdCBlbmRNc2cgPSBlbmRJbnB1dC5tZXNzYWdlID8/IHV0aWwuZm9ybWF0KHRpbWluZ01zZ1RlbXBsYXRlLCB0aGlzLmRlZmluaXRpb24ubmFtZSwgZHVyYXRpb24uYXNTZWMpO1xuICAgICAgICBjb25zdCBlbmRQYXlsb2FkID0gZW5kSW5wdXQucGF5bG9hZDtcblxuICAgICAgICBhd2FpdCBub3RpZnkodGhpcy5kZWZpbml0aW9uLmVuZC5tc2coXG4gICAgICAgICAgZW5kTXNnLCB7XG4gICAgICAgICAgICBkdXJhdGlvbjogZHVyYXRpb24uYXNNcyxcbiAgICAgICAgICAgIC4uLmVuZFBheWxvYWQsXG4gICAgICAgICAgfSBhcyBFKSk7XG5cbiAgICAgICAgcmV0dXJuIGR1cmF0aW9uO1xuICAgICAgfSxcbiAgICB9O1xuICB9XG59XG5cbmZ1bmN0aW9uIHBhcnNlQXJnczxTIGV4dGVuZHMgb2JqZWN0PihmaXJzdDogYW55LCBzZWNvbmQ/OiBTKTogeyBtZXNzYWdlOiBzdHJpbmcgfCB1bmRlZmluZWQ7IHBheWxvYWQ6IFMgfSB7XG4gIGNvbnN0IGZpcnN0SXNNZXNzYWdlID0gdHlwZW9mIGZpcnN0ID09PSAnc3RyaW5nJztcblxuICAvLyBXaGVuIHRoZSBmaXJzdCBhcmd1bWVudCBpcyBhIHN0cmluZyBvciB3ZSBoYXZlIGEgc2Vjb25kIGFyZ3VtZW50LCB0aGVuIHRoZSBmaXJzdCBhcmcgaXMgdGhlIG1lc3NhZ2VcbiAgY29uc3QgbWVzc2FnZSA9IChmaXJzdElzTWVzc2FnZSB8fCBzZWNvbmQpID8gZmlyc3QgOiB1bmRlZmluZWQ7XG5cbiAgLy8gV2hlbiB0aGUgZmlyc3QgYXJndW1lbnQgaXMgYSBzdHJpbmcgb3Igd2UgaGF2ZSBhIHNlY29uZCBhcmd1bWVudCxcbiAgLy8gdGhlbiB0aGUgc2Vjb25kIGFyZyBpcyB0aGUgcGF5bG9hZCwgb3RoZXJ3aXNlIHRoZSBmaXJzdCBhcmcgaXMgdGhlIHBheWxvYWRcbiAgY29uc3QgcGF5bG9hZCA9IChmaXJzdElzTWVzc2FnZSB8fCBzZWNvbmQpID8gc2Vjb25kIDogZmlyc3Q7XG5cbiAgcmV0dXJuIHtcbiAgICBtZXNzYWdlLFxuICAgIHBheWxvYWQsXG4gIH07XG59XG5cbmZ1bmN0aW9uIHdpdGhTcGFuSWQoc3Bhbjogc3RyaW5nLCBtZXNzYWdlOiBBY3Rpb25MZXNzTWVzc2FnZTx1bmtub3duPik6IEFjdGlvbkxlc3NNZXNzYWdlPHVua25vd24+IHtcbiAgcmV0dXJuIHtcbiAgICAuLi5tZXNzYWdlLFxuICAgIHNwYW4sXG4gIH07XG59XG4iXX0=