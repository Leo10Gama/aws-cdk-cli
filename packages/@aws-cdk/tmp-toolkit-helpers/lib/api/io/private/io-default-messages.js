"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IoDefaultMessages = void 0;
const util = require("util");
const messages_1 = require("./messages");
/**
 * Helper class to emit standard log messages to an IoHost
 *
 * It wraps an `IoHelper`, and adds convenience methods to emit default messages
 * for the various log levels.
 */
class IoDefaultMessages {
    ioHelper;
    constructor(ioHelper) {
        this.ioHelper = ioHelper;
    }
    notify(msg) {
        return this.ioHelper.notify(msg);
    }
    requestResponse(msg) {
        return this.ioHelper.requestResponse(msg);
    }
    error(input, ...args) {
        this.emitMessage(messages_1.IO.DEFAULT_TOOLKIT_ERROR, input, ...args);
    }
    warn(input, ...args) {
        this.emitMessage(messages_1.IO.DEFAULT_TOOLKIT_WARN, input, ...args);
    }
    warning(input, ...args) {
        this.emitMessage(messages_1.IO.DEFAULT_TOOLKIT_WARN, input, ...args);
    }
    info(input, ...args) {
        this.emitMessage(messages_1.IO.DEFAULT_TOOLKIT_INFO, input, ...args);
    }
    debug(input, ...args) {
        this.emitMessage(messages_1.IO.DEFAULT_TOOLKIT_DEBUG, input, ...args);
    }
    trace(input, ...args) {
        this.emitMessage(messages_1.IO.DEFAULT_TOOLKIT_TRACE, input, ...args);
    }
    result(input, ...args) {
        const message = args.length > 0 ? util.format(input, ...args) : input;
        // This is just the default "info" message but with a level of "result"
        void this.ioHelper.notify({
            time: new Date(),
            code: messages_1.IO.DEFAULT_TOOLKIT_INFO.code,
            level: 'result',
            message,
            data: undefined,
        });
    }
    emitMessage(maker, input, ...args) {
        // Format message if args are provided
        const message = args.length > 0 ? util.format(input, ...args) : input;
        void this.ioHelper.notify(maker.msg(message));
    }
}
exports.IoDefaultMessages = IoDefaultMessages;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW8tZGVmYXVsdC1tZXNzYWdlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hcGkvaW8vcHJpdmF0ZS9pby1kZWZhdWx0LW1lc3NhZ2VzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDZCQUE2QjtBQUc3Qix5Q0FBZ0M7QUFFaEM7Ozs7O0dBS0c7QUFDSCxNQUFhLGlCQUFpQjtJQUNDO0lBQTdCLFlBQTZCLFFBQWtCO1FBQWxCLGFBQVEsR0FBUixRQUFRLENBQVU7SUFDL0MsQ0FBQztJQUVNLE1BQU0sQ0FBQyxHQUErQjtRQUMzQyxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFFTSxlQUFlLENBQU8sR0FBNEI7UUFDdkQsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM1QyxDQUFDO0lBRU0sS0FBSyxDQUFDLEtBQWEsRUFBRSxHQUFHLElBQWU7UUFDNUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFFLENBQUMscUJBQXFCLEVBQUUsS0FBSyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7SUFDN0QsQ0FBQztJQUVNLElBQUksQ0FBQyxLQUFhLEVBQUUsR0FBRyxJQUFlO1FBQzNDLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBRSxDQUFDLG9CQUFvQixFQUFFLEtBQUssRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDO0lBQzVELENBQUM7SUFFTSxPQUFPLENBQUMsS0FBYSxFQUFFLEdBQUcsSUFBZTtRQUM5QyxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQUUsQ0FBQyxvQkFBb0IsRUFBRSxLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQztJQUM1RCxDQUFDO0lBRU0sSUFBSSxDQUFDLEtBQWEsRUFBRSxHQUFHLElBQWU7UUFDM0MsSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFFLENBQUMsb0JBQW9CLEVBQUUsS0FBSyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7SUFDNUQsQ0FBQztJQUVNLEtBQUssQ0FBQyxLQUFhLEVBQUUsR0FBRyxJQUFlO1FBQzVDLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBRSxDQUFDLHFCQUFxQixFQUFFLEtBQUssRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDO0lBQzdELENBQUM7SUFFTSxLQUFLLENBQUMsS0FBYSxFQUFFLEdBQUcsSUFBZTtRQUM1QyxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQUUsQ0FBQyxxQkFBcUIsRUFBRSxLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQztJQUM3RCxDQUFDO0lBRU0sTUFBTSxDQUFDLEtBQWEsRUFBRSxHQUFHLElBQWU7UUFDN0MsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztRQUN0RSx1RUFBdUU7UUFDdkUsS0FBSyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQztZQUN4QixJQUFJLEVBQUUsSUFBSSxJQUFJLEVBQUU7WUFDaEIsSUFBSSxFQUFFLGFBQUUsQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJO1lBQ2xDLEtBQUssRUFBRSxRQUFRO1lBQ2YsT0FBTztZQUNQLElBQUksRUFBRSxTQUFTO1NBQ2hCLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTyxXQUFXLENBQUMsS0FBMkIsRUFBRSxLQUFhLEVBQUUsR0FBRyxJQUFlO1FBQ2hGLHNDQUFzQztRQUN0QyxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO1FBQ3RFLEtBQUssSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ2hELENBQUM7Q0FDRjtBQXJERCw4Q0FxREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyB1dGlsIGZyb20gJ3V0aWwnO1xuaW1wb3J0IHR5cGUgeyBBY3Rpb25MZXNzTWVzc2FnZSwgQWN0aW9uTGVzc1JlcXVlc3QsIElvSGVscGVyIH0gZnJvbSAnLi9pby1oZWxwZXInO1xuaW1wb3J0IHR5cGUgeyBJb01lc3NhZ2VNYWtlciB9IGZyb20gJy4vbWVzc2FnZS1tYWtlcic7XG5pbXBvcnQgeyBJTyB9IGZyb20gJy4vbWVzc2FnZXMnO1xuXG4vKipcbiAqIEhlbHBlciBjbGFzcyB0byBlbWl0IHN0YW5kYXJkIGxvZyBtZXNzYWdlcyB0byBhbiBJb0hvc3RcbiAqXG4gKiBJdCB3cmFwcyBhbiBgSW9IZWxwZXJgLCBhbmQgYWRkcyBjb252ZW5pZW5jZSBtZXRob2RzIHRvIGVtaXQgZGVmYXVsdCBtZXNzYWdlc1xuICogZm9yIHRoZSB2YXJpb3VzIGxvZyBsZXZlbHMuXG4gKi9cbmV4cG9ydCBjbGFzcyBJb0RlZmF1bHRNZXNzYWdlcyB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgaW9IZWxwZXI6IElvSGVscGVyKSB7XG4gIH1cblxuICBwdWJsaWMgbm90aWZ5KG1zZzogQWN0aW9uTGVzc01lc3NhZ2U8dW5rbm93bj4pOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gdGhpcy5pb0hlbHBlci5ub3RpZnkobXNnKTtcbiAgfVxuXG4gIHB1YmxpYyByZXF1ZXN0UmVzcG9uc2U8VCwgVT4obXNnOiBBY3Rpb25MZXNzUmVxdWVzdDxULCBVPik6IFByb21pc2U8VT4ge1xuICAgIHJldHVybiB0aGlzLmlvSGVscGVyLnJlcXVlc3RSZXNwb25zZShtc2cpO1xuICB9XG5cbiAgcHVibGljIGVycm9yKGlucHV0OiBzdHJpbmcsIC4uLmFyZ3M6IHVua25vd25bXSkge1xuICAgIHRoaXMuZW1pdE1lc3NhZ2UoSU8uREVGQVVMVF9UT09MS0lUX0VSUk9SLCBpbnB1dCwgLi4uYXJncyk7XG4gIH1cblxuICBwdWJsaWMgd2FybihpbnB1dDogc3RyaW5nLCAuLi5hcmdzOiB1bmtub3duW10pIHtcbiAgICB0aGlzLmVtaXRNZXNzYWdlKElPLkRFRkFVTFRfVE9PTEtJVF9XQVJOLCBpbnB1dCwgLi4uYXJncyk7XG4gIH1cblxuICBwdWJsaWMgd2FybmluZyhpbnB1dDogc3RyaW5nLCAuLi5hcmdzOiB1bmtub3duW10pIHtcbiAgICB0aGlzLmVtaXRNZXNzYWdlKElPLkRFRkFVTFRfVE9PTEtJVF9XQVJOLCBpbnB1dCwgLi4uYXJncyk7XG4gIH1cblxuICBwdWJsaWMgaW5mbyhpbnB1dDogc3RyaW5nLCAuLi5hcmdzOiB1bmtub3duW10pIHtcbiAgICB0aGlzLmVtaXRNZXNzYWdlKElPLkRFRkFVTFRfVE9PTEtJVF9JTkZPLCBpbnB1dCwgLi4uYXJncyk7XG4gIH1cblxuICBwdWJsaWMgZGVidWcoaW5wdXQ6IHN0cmluZywgLi4uYXJnczogdW5rbm93bltdKSB7XG4gICAgdGhpcy5lbWl0TWVzc2FnZShJTy5ERUZBVUxUX1RPT0xLSVRfREVCVUcsIGlucHV0LCAuLi5hcmdzKTtcbiAgfVxuXG4gIHB1YmxpYyB0cmFjZShpbnB1dDogc3RyaW5nLCAuLi5hcmdzOiB1bmtub3duW10pIHtcbiAgICB0aGlzLmVtaXRNZXNzYWdlKElPLkRFRkFVTFRfVE9PTEtJVF9UUkFDRSwgaW5wdXQsIC4uLmFyZ3MpO1xuICB9XG5cbiAgcHVibGljIHJlc3VsdChpbnB1dDogc3RyaW5nLCAuLi5hcmdzOiB1bmtub3duW10pIHtcbiAgICBjb25zdCBtZXNzYWdlID0gYXJncy5sZW5ndGggPiAwID8gdXRpbC5mb3JtYXQoaW5wdXQsIC4uLmFyZ3MpIDogaW5wdXQ7XG4gICAgLy8gVGhpcyBpcyBqdXN0IHRoZSBkZWZhdWx0IFwiaW5mb1wiIG1lc3NhZ2UgYnV0IHdpdGggYSBsZXZlbCBvZiBcInJlc3VsdFwiXG4gICAgdm9pZCB0aGlzLmlvSGVscGVyLm5vdGlmeSh7XG4gICAgICB0aW1lOiBuZXcgRGF0ZSgpLFxuICAgICAgY29kZTogSU8uREVGQVVMVF9UT09MS0lUX0lORk8uY29kZSxcbiAgICAgIGxldmVsOiAncmVzdWx0JyxcbiAgICAgIG1lc3NhZ2UsXG4gICAgICBkYXRhOiB1bmRlZmluZWQsXG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGVtaXRNZXNzYWdlKG1ha2VyOiBJb01lc3NhZ2VNYWtlcjx2b2lkPiwgaW5wdXQ6IHN0cmluZywgLi4uYXJnczogdW5rbm93bltdKSB7XG4gICAgLy8gRm9ybWF0IG1lc3NhZ2UgaWYgYXJncyBhcmUgcHJvdmlkZWRcbiAgICBjb25zdCBtZXNzYWdlID0gYXJncy5sZW5ndGggPiAwID8gdXRpbC5mb3JtYXQoaW5wdXQsIC4uLmFyZ3MpIDogaW5wdXQ7XG4gICAgdm9pZCB0aGlzLmlvSGVscGVyLm5vdGlmeShtYWtlci5tc2cobWVzc2FnZSkpO1xuICB9XG59XG4iXX0=